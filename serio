#!/usr/bin/env python
# vim: set ts=8 sw=8 sts=8 noet :

# upload/download files to an embedded Linux system via a serial port shell

# serio - program to copy files via a serial device
#
# Copyright (C) 2011, 2012 heffnercj, cheffnera
#    https://code.google.com/archive/p/serio/source/default/commits
#
# Copyright (C) 2016, 2017 Frank Rowand
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import re
import serial
import sys, os.path, math, time
import hashlib
import StringIO
import uu
from getopt import GetoptError, getopt as GetOpt

# verbose
#  1  bytes uploaded/downloaded
#  2  progress
verbose = 0

# zero always will mean no checksum
CHECKSUM_NONE   = 0
CHECKSUM_MD5SUM = 1

class ParseMinicom:

	PATH = "/etc/minicom/"
	PREFIX = "minirc."
	CONF = {'baudrate' : None, 'port' : None}

	def __init__(self, name):
		path = self.PATH + self.PREFIX + name
		
		for line in open(path).readlines():
			for key,value in self.CONF.iteritems():
				if line.startswith('pu ' + key):
					self.CONF[key] = line.split(key)[1].strip()

	def setting(self, name):
		if self.CONF.has_key(name):
			return self.CONF[name]
		else:
			return None

	def baudrate(self):
		return self.setting('baudrate')

	def port(self):
		return self.setting('port')

class RemoteExecute:

	DELIM          = "THIS IS THE END, BEAUTIFUL FRIEND"
	DATA_PER_WRITE = 100
	PRINT_INTERVAL = 256

	def __init__(self, fp, io_time=None):
		global verbose
		if callable(fp.read) and callable(fp.write) and callable(fp.readline) and callable (fp.readlines):
			self.fp           = fp
			self.current      = 0
			self.showprogress = verbose > 1
			self.last_size    = 0
			self.IO_TIME      = io_time
		else:
			raise Exception("bad fp object!")

	def progress(self, current, total):
		
		if not self.showprogress:
			return

		if current > total:
			current = total

		if self.last_size == 0 or current == total or (current - self.last_size) >= self.PRINT_INTERVAL:
			if total == 0:
				percent = 1
			else:
				percent = (current / float(total)) * 100
			marks      = int(math.floor(percent / 2))
			markstring = "#" * marks
			dotstring  = "." * (50 - marks)
			sys.stdout.write("\r[%s%s] %0.2f%% (%d / %d)" % (markstring, dotstring, percent, current, total))
			sys.stdout.flush()
			self.last_size = current

	def readuntil(self, count=None, lines=None, delim=None):
		data = ""

		if count is not None:

			for i in range(0, count):
				data = self.fp.read(1)
				self.progress(len(data), count)

		elif lines is not None:

			for i in range(0, lines):
				data += self.fp.readline()
				self.progress(len(data), len(data))

		elif delim is not None:

			while not data.endswith(delim):
				data += self.serial.read(1)
				self.progress((len(data)-len(delim)), (len(data)-len(delim)))

			data = data[0:-len(delim)]
	
		self.progress(len(data), len(data))
		if self.showprogress > 0:
			print
		return data

	def execute(self, cmd):
		# This program MUST send a newline to the target once before
		# calling a sequence of execute() so that the data read by
		# readline() will include a shell prompt.

		self.fp.write(cmd + "\n")

		# target shell echos command, slurp it up
		cmd_echo = self.fp.readline()

		# WARNING: this will not work if the prompt is 0 bytes long
		#
		# If a command is sent to the target shell before the shell
		# has issued a prompt then the shell will echo the command
		# (including the newline that will cause a readline() to
		# complete).  When the shell is ready to read the next
		# command it will print the prompt and once again echo the
		# command.
		#
		# If the echoed command does not include the prompt then
		# repeat the readline().
		#
		if cmd_echo == cmd + "\r\n":
			cmd_echo = self.fp.readline()

	def getfile(self, filename):
		# required before calls to execute()
		self._safe_write('\n')
		self.fp.readline()

		if self.basic:
			self.execute("cat '%s' && echo '%s'" % (filename, self.DELIM))
			data = self.readuntil(delim=self.DELIM)

			# Catting data over a terminal turns all \n's to \r\n's
			data = data.replace("\r\n", "\n")

			mode = -1
			return mode, data

		else:
			if self.checksum == CHECKSUM_MD5SUM:

				self.execute("stat -c %%s '%s'" % (filename))
				data = self.fp.readline()
				file_size = int(data)

				self.execute("md5sum '%s'" % (filename))
				md5sum = self.fp.readline()

			self.execute("uuencode '%s' /dev/stdout" % (filename))
			data = self.readuntil(delim="end")

			# be careful about format of uuencode header

			match = re.search("\n", data)
			if match:
				full_header = data[0:match.start() - 1]
			else:
				full_header = data

			match = re.match("begin +[0-9]*", data)
			if match:
				header = data[match.start():match.end()]
				header = re.sub("^begin ", "", header, 1)
				header = re.sub(" +.*","", header)
				if not re.match("[0-9]+", header):
					raise Exception("invalid uuencode header: " + full_header)
			else:
				raise Exception("invalid uuencode header: " + full_header)

			mode = int(header, 8)

			infile  = StringIO.StringIO(data + "end")
			outfile = StringIO.StringIO()
			uu.decode(infile,outfile)

			if self.checksum == CHECKSUM_MD5SUM:
				if hashlib.md5(outfile.getvalue()).hexdigest() != md5sum[0:32]:
					raise Exception("md5sum of dest != source")

				if len(outfile.getvalue()) != file_size:
					raise Exception("size of dest != source")

			return mode, outfile.getvalue()


	def putfile(self, data, filename):
		i         = 0
		j         = 0
		data_size = len(data)

		# try to ensure at shell prompt
		# also, required before calls to execute()
		self._safe_write('\n')
		self.fp.readline()

		# disable shell echo
		# Otherwise shell echos from a large --put may still be in
		# progress when putfile() returns.  Even with disabled echo,
		# target will send a shell prompt each time it receives a
		# newline, so this does not eliminate all traffic from the
		# target, it just reduces it.
		self._safe_write('stty -echo\n')

		# Create/zero the file
		self._safe_write('echo -ne > %s\n' % filename)

		# Loop through all the bytes in the source data and append them
		# to the destination file.  Limit size of data in the echo
		# command to DATA_PER_WRITE characters.
		while i < data_size:
			j = 0
			dpart = ''

			while j < self.DATA_PER_WRITE and i < data_size:
				data_i = data[i]
				odata = ord(data_i)
				if 'a' <= data_i <= 'z' or 'A' <= data_i <= 'Z' or '0' <= data_i <= '9':
					dpart += data_i
					j += 1
				else:
					if j + 5 > self.DATA_PER_WRITE:
						break
					dpart += '\\x%.2X' % int(odata)
					j += 5
				i += 1

			self._safe_write('echo -ne "%s" >> %s\n' % (dpart, filename))

			# Show upload status
			self.progress(i, data_size)

		if self.showprogress:
			print

		# enable shell echo
		self._safe_write('stty echo\n')

		return i

	def _safe_write(self, data):
		self.fp.write(data)
		if data.endswith('\n'):
			# give the target system time for disk/flash I/O
			if self.IO_TIME is not None:
				time.sleep(self.IO_TIME)

	def close(self):
		self.fp.close()

	def cmd(self, cmd_str, timeout=None):
                delim="[[&&%s&&]]" % "serio_cmd_done"
		self.fp.write(cmd_str + ' ; echo "%s"\n' % delim)
		line = self.fp.readline()

		# should do this in a thread so we can output while
		# the data is coming back
		# FIXTHIS - use timeout here
		result = self.readuntil(None, None, delim)

		# Sending output over a terminal turns all \n's to \r\n's
		result = result.replace("\r\n", "\n")
		return result


class SerialTerminal(RemoteExecute):

	def __init__(self, basic, checksum, port, baudrate, io_time):
		self.basic    = basic
		self.checksum = checksum
		self.serial   = serial.Serial(port=port, baudrate=baudrate)
		already_open  = self.serial.isOpen()
		if not already_open:
			self.serial.open()
		RemoteExecute.__init__(self, fp=self.serial, io_time=io_time)

def usage():
	print '\nUsage: %s [OPTIONS]\n' % os.path.basename(sys.argv[0])
	print '   -b, --baudrate=<baud>           Serial port baud rate [115200]'
	print '   -B, --basic                     Use basic (minimal) target commands'
	print '   -d, --destination=<file path>   Path to destination file'
	print '   -g, --get                       Get a file from the remote system'
	print '   -h, --help                      Show help'
	print '   -p, --put                       Put a file to the remote system'
	print '   -c, --cmd="command with args"   Execute a command on the remote system'
	print '   -M, --md5sum                    verify file transfer with md5sum'
	print '   -m, --minicom=<name>            Name of the minicom config file to use'
	print '   -P, --paranoid                  Assume target is fragile, be conservative'
	print '   -s, --source=<file path>        Path to source file'
	print '   -t, --time=<seconds>            delay in _safe_write() [if -P ' + str(paranoid_time) + ' else 0]'
	print '   -v, --verbose                   Print more information (cumulative)'
	print '   -y, --port=<serial port>        Serial port to use [/dev/ttyUSB0]'
	print ''
	print 'Side-effects:'
	print '  --put'
	print '    - shell echo will be enabled on target (stty echo)'
	print '    - if exception occurs, shell echo may be disabled on'
	print '      target (target can be fixed with command "stty echo")'
	print ''
	print 'Target Dependencies:'
	print '  - May hang if the shell prompt is zero bytes long'
	print '  - Target shell echos \\r\\n at end of command input'
	print '  - Target shell built-ins or programs:'
	print '    --get --basic  :  cat, echo'
	print '    --get          :                uuencode'
	print '    --get --md5sum :  stat, md5sum, uuencode'
	print '    --put          :  stty, echo'
	print ''
	print 'Return:'
	print '  0  no error'
	print '  1  --help or argument error'
	print '  2  --put error'
	print '  3  --get error'
	print ''
	sys.exit(1)


paranoid_time = 0.1

def main():

	global verbose

	action      = None
	basic       = None
	baudrate    = 115200
	checksum    = CHECKSUM_NONE
	destination = None
	io_time     = None
	minicom     = None
	paranoid    = None
	port        = '/dev/ttyUSB0'
	source      = None

	try:
		opts, args = GetOpt(sys.argv[1:],
					'b:Bc:d:ghMm:pPs:t:vy:',
				    [
				     'baudrate=',
				     'basic',
				     'cmd=',
				     'destination=',
				     'get',
				     'help'
				     'md5sum',
				     'minicom=',
				     'put',
				     'paranoid',
				     'source=',
				     'time=',
				     'verbose',
				     'port=',
				    ]
				   )
	except GetoptError, e:
		print 'Usage error:', e
		usage()

	for opt, arg in opts:
		if opt in ('-b', '--baudrate'):
			baudrate = arg
		elif opt in ('-B', '--basic'):
			basic = 1
		elif opt in ('-c', '--cmd'):
			action = 'cmd'
			cmd_str = arg
		elif opt in ('-d', '--destination'):
			destination = arg
		elif opt in ('-g', '--get'):
			action = 'get'
		elif opt in ('-h', '--help'):
			usage()
		elif opt in ('-M', '--md5sum'):
			checksum = CHECKSUM_MD5SUM
		elif opt in ('-m', '--minicom'):
			minicom = ParseMinicom(arg)
		elif opt in ('-p', '--put'):
			action = 'put'
		elif opt in ('-P', '--paranoid'):
			paranoid = 1
		elif opt in ('-s', '--source'):
			source = arg
		elif opt in ('-t', '--time'):
			io_time = float(arg)
		elif opt in ('-v', '--verbose'):
			verbose += 1
		elif opt in ('-y', '--port'):
			port = arg

	if paranoid:
		if io_time is None:
			io_time = paranoid_time

	if action is None:
		print 'Usage error: must specify either -g or -p options'
		usage()

	if action in ['get','put']:
		if not source:
			print 'Usage error: must specify the -s option'
			usage()

		if destination is None or destination == ".":
			destination = os.path.basename(source)

	if minicom is not None:
		port     = minicom.port()
		baudrate = minicom.baudrate()

	sterm = SerialTerminal(basic, checksum, port, baudrate, io_time)

	if action == 'put':
		try:
			host_file = open(source, "rb")
			size = sterm.putfile(host_file.read(), destination)
		
			if verbose > 0:
				print 'Uploaded %d bytes from %s to %s' % (size, source, destination)
		except Exception, e:
			print "ERROR:", e
			sys.exit(2)

	elif action == 'get':
		try:
			mode, data = sterm.getfile(source)
			if len(data):
				open(destination, "wb").write(data)
				if mode != -1:
					os.chmod(destination, mode)

			if verbose > 0:
				print 'Downloaded %d bytes from %s to %s' % (len(data), source, destination)
		except Exception, e:
			print "\nERROR:", e
			sys.exit(3)

	elif action == 'cmd':
		try:
			data = sterm.cmd(cmd_str)
			if len(data):
				print data
		except Exception, e:
			print "ERROR:", e
	else:
		print "ERROR: unknown action '%s'" % action
			
	sterm.close()



if __name__ == '__main__':
	main()
